// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc199.OffseasonBot2016;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainLeftMotor;
    public static SpeedController drivetrainRightMotor;
    public static RobotDrive drivetrainRobotDrive;
    public static AnalogGyro drivetrainGyro;
    public static Encoder drivetrainLeftEncoder;
    public static Encoder drivetrainRightEncoder;
    public static Compressor intakeCompressor;
    public static DoubleSolenoid intakePivotPiston;
    public static SpeedController intakeIntakeMotor;
    public static DigitalInput intakeIntakenSensor;
    public static SpeedController shooterShooterMotor;
    public static SpeedController shooterLoaderMotor;
    public static Encoder shooterShooterEncoder;
    public static DoubleSolenoid shooterHoodTiltPiston;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainLeftMotor = new Talon(0);
        LiveWindow.addActuator("Drivetrain", "Left Motor", (Talon) drivetrainLeftMotor);
        
        drivetrainRightMotor = new Talon(1);
        LiveWindow.addActuator("Drivetrain", "Right Motor", (Talon) drivetrainRightMotor);
        
        drivetrainRobotDrive = new RobotDrive(drivetrainLeftMotor, drivetrainRightMotor);
        
        drivetrainRobotDrive.setSafetyEnabled(true);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);

        drivetrainGyro = new AnalogGyro(0);
        LiveWindow.addSensor("Drivetrain", "Gyro", drivetrainGyro);
        drivetrainGyro.setSensitivity(0.007);
        drivetrainLeftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "Left Encoder", drivetrainLeftEncoder);
        drivetrainLeftEncoder.setDistancePerPulse(1.0);
        drivetrainLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        drivetrainRightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "Right Encoder", drivetrainRightEncoder);
        drivetrainRightEncoder.setDistancePerPulse(1.0);
        drivetrainRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        intakeCompressor = new Compressor(0);
        
        
        intakePivotPiston = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Intake", "Pivot Piston", intakePivotPiston);
        
        intakeIntakeMotor = new Talon(2);
        LiveWindow.addActuator("Intake", "Intake Motor", (Talon) intakeIntakeMotor);
        
        intakeIntakenSensor = new DigitalInput(4);
        LiveWindow.addSensor("Intake", "Intaken Sensor", intakeIntakenSensor);
        
        shooterShooterMotor = new Talon(4);
        LiveWindow.addActuator("Shooter", "Shooter Motor", (Talon) shooterShooterMotor);
        
        shooterLoaderMotor = new Talon(5);
        LiveWindow.addActuator("Shooter", "Loader Motor", (Talon) shooterLoaderMotor);
        
        shooterShooterEncoder = new Encoder(5, 6, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "Shooter Encoder", shooterShooterEncoder);
        shooterShooterEncoder.setDistancePerPulse(1.0);
        shooterShooterEncoder.setPIDSourceType(PIDSourceType.kRate);
        shooterHoodTiltPiston = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Shooter", "Hood Tilt Piston", shooterHoodTiltPiston);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
